<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Jianlun's blog</title><link>https://Jian-lun.github.io</link><description>梦兰的博客</description><copyright>Jianlun's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/157687961?v=4&amp;size=64</url><title>avatar</title><link>https://Jian-lun.github.io</link></image><lastBuildDate>Sun, 01 Sep 2024 14:53:23 +0000</lastBuildDate><managingEditor>Jianlun's blog</managingEditor><ttl>60</ttl><webMaster>Jianlun's blog</webMaster><item><title>安卓开发 防一键去除签名校验</title><link>https://Jian-lun.github.io/post/an-zhuo-kai-fa-%20-fang-yi-jian-qu-chu-qian-ming-xiao-yan.html</link><description>```java&#13;
&#13;
import android.annotation.*;&#13;
import android.app.*;&#13;
import android.content.*;&#13;
import android.content.pm.*;&#13;
import android.icu.text.*;&#13;
import android.os.*;&#13;
import android.util.*;&#13;
import android.widget.*;&#13;
import java.io.*;&#13;
import java.security.*;&#13;
import java.util.*;&#13;
import java.lang.Process;&#13;
import java.util.Base64;&#13;
&#13;
public class MainActivity extends Activity {&#13;
//MD5进行了Base64编码&#13;
    private static final String BASE64_SIGNATURE = 'NTkzNTQ3MTU0YjdlNzU0ZGMyZTRmNGVlYWNjZDQ1ODU=';&#13;
&#13;
    @Override&#13;
   &#13;
    protected void onCreate(Bundle savedInstanceState) {&#13;
        super.onCreate(savedInstanceState);&#13;
        &#13;
&#13;
        if (!verifyAppSignature(this)) {&#13;
            &#13;
            finish();&#13;
        } else {&#13;
           &#13;
        }&#13;
    }&#13;
&#13;
    private boolean verifyAppSignature(Context context) {&#13;
        String text;&#13;
        String packageName = context.getPackageName();&#13;
        try {&#13;
            BufferedReader br = new BufferedReader(new FileReader('/proc/self/maps'));&#13;
            String apkPath = '';&#13;
            while ((text = br.readLine()) != null) {&#13;
                for (String str : text.split('\\s+')) {&#13;
                    if (str.startsWith('/data/app/')&#13;
                                                &amp;&amp; str.endsWith('/base.apk')&#13;
                                                &amp;&amp; str.contains(packageName)) {&#13;
                        apkPath = str;&#13;
                        break;&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            if (apkPath.isEmpty()) {&#13;
                return false;&#13;
            }&#13;
&#13;
            File apkFile = new File(apkPath);&#13;
            long apkTimestamp = apkFile.lastModified();&#13;
&#13;
            &#13;
            ApplicationInfo appInfo = context.getApplicationInfo();&#13;
            File appFile = new File(appInfo.sourceDir);&#13;
            long sourceTimestamp = appFile.lastModified();&#13;
&#13;
            if (sourceTimestamp != apkTimestamp) {&#13;
                return false;&#13;
            }&#13;
}&#13;
&#13;
            File file = new File(context.getDir('hcc', 0), 'hc');&#13;
            if (file.exists()) {&#13;
                file.delete();&#13;
            }&#13;
            String destinationPath = file.getAbsolutePath();&#13;
&#13;
            Runtime.getRuntime().exec('cp ' + apkPath + ' ' + destinationPath).waitFor();&#13;
&#13;
            byte[] bytes = context.getPackageManager().getPackageArchiveInfo(destinationPath, 64).signatures[0].toByteArray();&#13;
            if (bytes == null) {&#13;
                return false;&#13;
            }&#13;
&#13;
            MessageDigest md = MessageDigest.getInstance('MD5');&#13;
            byte[] digest = md.digest(bytes);&#13;
            StringBuilder hexString = new StringBuilder();&#13;
            for (byte b : digest) {&#13;
                String hex = Integer.toHexString(0xff &amp; b);&#13;
                if (hex.length() == 1) {&#13;
                    hexString.append('0');&#13;
                }&#13;
                hexString.append(hex);&#13;
            }&#13;
&#13;
            String calculatedSignature = hexString.toString();&#13;
            String expectedSignature = new String(Base64.getDecoder().decode(BASE64_SIGNATURE));&#13;
            return calculatedSignature.equals(expectedSignature);&#13;
        } catch (Exception e) {&#13;
            return false;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
if (!verifyAppSignature(this)) {&#13;
    finish();&#13;
}&#13;
// 这里是直接放到onCreate方法里了返回true或false&#13;
&#13;
else {&#13;
    // 这里可以放置验证通过后需要执行的代码&#13;
}&#13;
```。</description><guid isPermaLink="true">https://Jian-lun.github.io/post/an-zhuo-kai-fa-%20-fang-yi-jian-qu-chu-qian-ming-xiao-yan.html</guid><pubDate>Sun, 01 Sep 2024 14:46:57 +0000</pubDate></item></channel></rss>